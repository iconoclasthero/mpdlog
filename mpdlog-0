#!/bin/bash
# nb: the swp wfile that editscript relies on is provided by nano

MPDSOCK="/var/run/mpd/socket"
shopt -s extglob
songdir=\/library\/music\/$(dirname "$(\mpc current -f %file%)")
cover=( "${songdir}/"@(c|C)over.@(png|jpg|gif) )
shopt -u extglob
declare -a mpdlogfile=( /var/log/mpd/mpd.log )

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" < /dev/tty; }


mpdc() {
    ! "$MPDSOCK" && MPDSOCK="/var/run/mpd/socket"
    local command=$1
    echo -ne "$command\n" | socat - UNIX-CONNECT:"$MPDSOCK"
}

ampm() {
    local ts="$1"
#    date -d "$ts" "+%b %d %I:%M %P"      # Apr 20 04:20 pm
    date -d "$ts" "+%b %d %l:%M %P"       # Apr 20 4:20 pm
}


sec2sex() {
  local h m s
  local input="${1%.*}"
  local dec="${1#*.}"; dec="${dec:0:1}"
  [[ "$dec" > 4 ]] && ((input++))

  h=$(( input / 3600 ))
  m=$(( (input % 3600) / 60 ))
  s=$(( input % 60 ))

  if (( h > 0 )); then
    printf "%02d:%02d:%02d" "$h" "$m" "$s"
  else
    printf "%d:%02d" "$m" "$s"
  fi
}



printmpcjson() {
echo -ne "${name:+Name: $name\n}"
echo -ne "${artist:+Artist: $artist\n}"
echo -ne "${album:+Album: $album\n}"
echo -ne "${albumartist:+Album Artist: $albumartist\n}"
echo -ne "${comment:+Comment: $comment\n}"
echo -ne "${composer:+Composer: $composer\n}"
echo -ne "${date:+Date: $date\n}"
echo -ne "${originaldate:+Original Date: $originaldate\n}"
echo -ne "${disc:+Disc: $disc\n}"
echo -ne "${genre:+Genre: $genre\n}"
echo -ne "${performer:+Performer: $performer\n}"
echo -ne "${title:+Title: $title\n}"
echo -ne "${track:+Track: $track\n}"
echo -ne "${time:+Time: $time\n}"
echo -ne "${file:+File: $file\n}"
echo -ne "${state:+State: $state\n}"
echo -ne "${volume:+Volume: $volume\n}"
echo -ne "${repeat:+Repeat: $repeat\n}"
echo -ne "${random:+Random: $random\n}"
echo -ne "${single:+Single: $single\n}"
echo -ne "${consume:+Consume: $consume\n}"
}


logsong() {
   i=$(date "+%b %d %H:%M : player: $1 ")
   j=$(mpc current -f %file%)
   printf '%s\"%s\"\n' "$i" "$j" | cat >> "$mpdlog"
}

navbuttons() {
echo "<hr>"
echo "<div class='button-container'>"
echo "<div class='button-row'>"
echo "<form id='controlForm'>"
echo "<button type='button' onclick='sendAction(\"toggle_playback\")' class='btn btn-primary'>Toggle Play/Pause</button>"
echo "<button type='button' onclick='sendAction(\"next_track\")' class='btn btn-primary'>Next Track</button>"
echo "</form>"
echo "</div>"
echo "<div class='button-row'>"
echo "<form id='controlForm'>"

if [[ "$long" != true ]]; then
  echo "<button type='button' onclick='window.location.href=\"/long\"' class='btn btn-info'>Long</button>"
else
  echo "<button type='button' onclick='window.location.href=\"/\"' class='btn btn-info'>Return</button>"
fi

if [[ "$raw" != true ]]; then
  echo "<button type='button' onclick='window.location.href=\"/raw\"' class='btn btn-info'>Raw</button>"
else
  echo "<button type='button' onclick='window.location.href=\"/\"' class='btn btn-info'>Return</button>"
fi

if [[ "$playing" != true ]]; then
  echo "<button type='button' onclick='window.location.href=\"/playing\"' class='btn btn-info'>Playing</button>"
else
  echo "<button type='button' onclick='window.location.href=\"/\"' class='btn btn-info'>Return</button>"
fi

echo "</form>"
echo "</div>"
echo "</div>"
echo "<script>
  function sendAction(action) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '?action=' + action, true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status == 200) {
        location.reload();
      }
    };
    xhr.send();
  }
</script>"
}

process_form() {
  if [ "$REQUEST_METHOD" = "GET" ]; then
    query=$(echo "$QUERY_STRING" | tr '&' '\n' | grep -E '^(action=)' | cut -d= -f2)
    case "$query" in
      toggle_playback)
        mpc toggle
        echo "Content-type: text/html; charset=UTF-8"
        echo ""
        exit
          ;;
      next_track)
        logsong "skipped"
        mpdc next
        echo "Content-type: text/html; charset=UTF-8"
        echo ""
        exit
        ;;
    esac
  fi
}

currently_playing() {
  current_json=$(mpd-current-json)
  state=$(echo "$current_json" | jq -r '.status.state')
  song_position=$(echo "$current_json" | jq -r '.status.song_position')
  song_length=$(echo "$current_json" | jq -r '.status.playlist_length')
  elapsed=$(echo "$current_json" | jq -r '.status.elapsed')
  total_time=$(echo "$current_json" | jq -r '.tags.duration')
  percent_time=$(echo "$current_json" | jq -r '.status.elapsed_percent')
  title=$(echo "$current_json" | jq -r '.tags.title')
  artist=$(echo "$current_json" | jq -r '.tags.artist')
  album=$(echo "$current_json" | jq -r '.tags.album')
  year=$(echo "$current_json" | jq -r '.tags.date')
  volume=$(echo "$current_json" | jq -r '.status.volume')
  repeat=$(echo "$current_json" | jq -r '.status.repeat')
  single=$(echo "$current_json" | jq -r '.status.single')
  random=$(echo "$current_json" | jq -r '.status.random')
  consume=$(echo "$current_json" | jq -r '.status.consume')
  songpath=$(echo "$current_json" | jq -r '.tags.filename')
  [[ "$repeat"  = true ]] && repeat="<span class='song'>⟳$nbsp</span>" || repeat='⟳'
  [[ "$consume" = true ]] && consume="✅" || consume="❌"
  [[ "$random"  = true ]] && random="✅" || random="❌"
  [[ "$single"  = true ]] && single="✅" || unset single

  # Output the information
  echo "<strong class='timestamp'>$state #$song_position/$song_length<br>"
  echo "elapsed $(sec2sex $elapsed)/$(sec2sex $total_time) ($percent_time%)</span><br>"
  echo "<span class='song'><strong>$title</strong></span><br>"
  echo "<span class='artist'><strong>$artist</strong></span><br>"
  year="${year%%-*}"
  echo "<span class='album'><strong> ${album% (mp3)} ${year:+(${year})} </strong></span><br>"

  # Output volume and playback status
  echo "<span class='album'>volume: $volume&nbsp ${repeat:+$repeat}$nbsp</span><span class='album'> ${single:+single: $single}<br>${random:+random: $random}&nbsp&nbsp${consume:+consume: $consume}<br>  </span><hr>"

  album_art_base64=$(mpc readpicture "$songpath" | base64)
  album_art_stderr=$(mpc readpicture "$songpath" 2>&1 >/dev/null)

  if ! [[ -z "$album_art_base64" && "$album_art_stderr" = No\ data* ]]; then
#    echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' />"
    echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' style='max-width: 30%; height: auto;' />"
  elif [[ "$album_art_stderr" = No\ data* ]]; then
    echo "<p>mpd returned \"No data\"</p>"
  else
    echo "<p>No album art available</p>"
  fi

  echo "<hr>"

}

[[ "$1" == @(edit|e|-e) ]] && editscript
[[ "$1" == "--long" ]] && long=true
[[ "$1" == "--raw" ]] && raw=true
[[ "$1" == "--playing" ]] && playing=true

process_form

echo "Content-type: text/html; charset=UTF-8"
echo ""
echo "<html><head><title>mpd played</title>"
echo "<link rel="icon" href="favicon.ico" type="image/x-icon">"
echo "<meta name='viewport' content='width=device-width, initial-scale=1'>"
echo "<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css'>"

mpcjson=$(mpd-current-json)

# this also works but is a security issue
#eval "$(jq -r '.metadata | to_entries[] | "\(.key)=\(.value | @sh)"' <<< "$mpcjson")"
#eval "$(jq -r '.status | to_entries[] | "\(.key)=\(.value | @sh)"' <<< "$mpcjson")"

while IFS= read -r line; do
    IFS='=' read -r key value <<< "$line"
    declare "$key=$value"
done < <(jq -r '.tags | to_entries[] | "\(.key)=\(.value)"' <<< "$mpcjson")

while IFS= read -r line; do
    IFS='=' read -r key value <<< "$line"
    declare "$key=$value"
done < <(jq -r '.status | to_entries[] | "\(.key)=\(.value)"' <<< "$mpcjson")

    [[ "$repeat" = true ]] && repeat="<span class='song'>⟳$nbsp</span>" || repeat='⟳'
    [[ "$consume" = true ]] && consume="✅" || consume="❌"
    [[ "$random" = true ]] && random="✅" || random="❌"
    [[ "$single" = true ]] && single="✅" || unset single


if [[ "$state" = playing && "$long" != true ]]; then
  echo "<meta http-equiv='refresh' content='45'>"
fi


echo "<style>"
echo "body { font-family: Arial, sans-serif; background-color: #f4f4f4; color: #333; padding: 20px; }"
echo "h1 { color: #444; }"
echo "pre { background-color: 383838; padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px; line-height: 1.5; }"
echo "h2, h3 { margin: 0; padding: 0; }"
echo ".timestamp { color: #007bff; }"
echo ".song { color: #28a745; }"
echo ".artist { color: #dc3545; }"
echo ".album { color: #6c757d; }"
echo ".watermark { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url('$cover'); opacity: 0.1; pointer-events: none; }"
echo ".tab-stops { tab-size: 8; -moz-tab-size: 8; -o-tab-size: 8; }"
#echo ".watermark {"
#echo "    width: 100%;"
#echo "    height: 100%;"
#echo "    position: fixed;"
#echo "    top: 0;"
#echo "    left: 0;"
#echo "    background-size: cover;"
#echo "    background-image: url('data:image/jpeg;base64,$album_art_base64');"
#echo "    opacity: 0.5;"
#echo "    z-index: -1;"
#echo "}"

echo ".pre-alternate:nth-child(odd) { color: #ff0000; }"  # Alternate color for odd in raw output
echo ".button-container { display: flex; flex-direction: column; gap: 10px; }"  # Change to column layoutecho ".button-row { display: flex; gap: 10px; }"

echo "</style>"
echo "</head><body>"


if [[ "$raw" = true ]]; then
tail1=2000 && tail2=250
logsize=$(stat -c %s "${mpdlogfile[@]}")
(( logsize < 300000 )) && mpdlogfile=( /var/log/mpd/mpd.log.1 /var/log/mpd/mpd.log )
  echo "<pre>"
  while read -r i; do
    unset boobs
    i=$(echo "$i" |sed 's/ : player//')
    [[ "$i" = @(*\:\ skipped\ *|*\:\ ignored\ *) ]] && boobs=true
    echo "<span class='pre-alternate'>${boobs:+<s>}$i${boobs:+</s>}</span>"
  done < <(cat "${mpdlogfile[@]}" | tail -n "${tail1}" | grep player | tail -n "${tail2}" | tac)
  echo "</pre>"

  navbuttons

  echo "</body>"
  exit 0

elif [[ "$playing" = true ]]; then
  currently_playing
  echo "<pre>"
#  while read -r i; do
#    echo "$i"
#  done < <(mpd-current-json)
  echo "$(mpd-current-json)"
  echo "</pre>"
  json_output=$(mpd-current-json)

  echo "<div class='currently-playing'>"
  echo "  <h3>Currently Playing:</h3>"

  # Parse and display status section
  echo "  <div class='status'>"
  echo "    <h4>Status:</h4>"
  echo "    <ul>"
  echo "$json_output" | jq -r '.status | to_entries[] | "      <li>\(.key): \(.value)</li>"'
  echo "    </ul>"
  echo "  </div>"

  # Parse and display tags section
  echo "  <div class='tags'>"
  echo "    <h4>Tags:</h4>"
  echo "    <ul>"
  echo "$json_output" | jq -r '.tags | to_entries[] | "      <li>\(.key): \(.value)</li>"'
  echo "    </ul>"
  echo "  </div>"

  echo "</div>"
  echo "<hr>"

  navbuttons
  echo "</body>"
  exit 0

fi



# Add watermark div
#echo "<div class='watermark'></div>"
#echo "<div class='watermark' style='background-image: url(\"$cover\");'></div>"

echo "<img src='/android-icon-48x48.png' style='display: inline; vertical-align: top;'><h1 style='display: inline; vertical-align: bottom;'>  mpd  </h1><hr>";

#baseline: Aligns the baseline of the element with the baseline of the parent element.
#top: Aligns the top of the element with the top of the tallest element in the line.
#bottom: Aligns the bottom of the element with the lowest element in the line.
#text-top: Aligns the top of the element with the top of the parent element's font.
#text-bottom: Aligns the bottom of the element with the bottom of the parent element's font.
#sub: Aligns the baseline of the element with the subscript baseline of the parent element.
#super: Aligns the baseline of the element with the superscript baseline of the parent element.

#currently_playing() {
#  #echo "<h3>currently playing:</h3>"
#  echo "<strong class='timestamp'>$(mpc status "\[%state%\] ##%songpos%#/%length%<br>elapsed %currenttime%/%totaltime% (%percenttime%)")</span><br>"
#  echo "<span class='song'><strong>$(mpc current -f "[%title%]|[%file%]")</strong></span><br>"
#  echo "<span class='artist'><strong>$(mpc current -f "%artist%")</span><br>"
#  year="${originaldate:-${date}}"
#  year="${year%%-*}" # this can be done in the echo below too
#  echo "<span class='album'><strong> ${album% (mp3)} ${year:+(${year})} </strong></span><br>" #${date:+($date)}
#  echo "<span class='album'>volume: $volume&nbsp ${repeat:+$repeat}$nbsp</span><span class='album'> ${single:+single: $single}<br>${random:+random: $random}&nbsp&nbsp${consume:+consume: $consume}<br>  </span><hr>"
#
#  if ! [[ -z "$album_art_base64" && "$album_art_stderr" = No\ data* ]]; then
##    echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' />"
#    echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' style='max-width: 30%; height: auto;' />"
#  elif [[ "$album_art_stderr" = No\ data* ]]; then
#    echo "<p>mpd returned \"No data\"</p>"
#  else
#    echo "<p>No album art available</p>"
#  fi
#
#echo "<hr>"
#
#}

currently_playing

#echo "<pre>"

tail1=500; tail2=12

if "${long}"; then
  tail1=20000 && tail2=250;
  logsize=$(stat -c %s "${mpdlogfile[@]}")
  (( logsize < 300000 )) && mpdlogfile=( /var/log/mpd/mpd.log.1 /var/log/mpd/mpd.log )
else
  logsize=$(stat -c %s "${mpdlogfile[@]}")
  (( logsize < 30000 )) && mpdlogfile=( /var/log/mpd/mpd.log.1 /var/log/mpd/mpd.log )
fi 2>/dev/null

while read -r i; do
  unset artist action
  timestamp="${i%% : *}"; timestamp=$(ampm "$timestamp")
  action="${i#*player: }"; action="${action%% *}"
  songpath="${i%\"*}"; qsongpath="\"$songpath"; songpath="${songpath#*\"}"
  song=$(basename "$songpath"); song="${song%.*}"
  duration=$(mpc --format %time% search filename "$songpath")

  #this does not work when songpath contains special characters, but it works otherwise:
  #duration=$(mpdc find\ \"\(File\ ==\ \\\""$songpath"\\\"\)\"|grep duration)

  if [[ "$song" =~ .+\ --\ (([[:digit:]]{1,3}(-)?)?[[:digit:]]{1,3})\ -\ .+ ]]; then
    artist="${song%% -- *}"
    ddtt="${song%% - *}"; ddtt="${ddtt##* -- }"
    unset disc track
    [[ "$ddtt" = *-* ]] && disc="${ddtt%-*}" && track="${ddtt#*-}" || track="$ddtt"
    song="${song#* - }"
  elif [[ "$song" =~ (([[:digit:]]{1,3}(-)?)?[[:digit:]]{1,3})\ -\ .+\ --\ .+ ]]; then
    artist="${song%% -- *}"; artist="${artist#* - }"
    song="${song#* -- }"
  else
    artist="THE SONG $songs DOES NOT FIT THE REGEX"
  fi

  songdir=$(dirname "$songpath")
# artist="${songdir%% -- *}"; artist="${artist##*\/}"
  album="${songdir#* -- }"; album="${album##*\/}"; album="${album% (mp3)}"
  [[ "$action" = @(skipped|ignored) ]] && echo "<s>"
  [[ "$action" = ignored ]] && echo "<i>"
  echo "<strong class='timestamp'>@ $timestamp, $action</span><br>"
  echo "<span class='song'>($disc-$track) $song - $duration</span></strong><br>"
  echo "<span class='artist'>$artist</span><br>"
  echo "<span class='album'>$album</span><br>"

  if [[ "${long}" = true ]]; then
    echo "<span class='album'>${songpath}</span><br>"
  fi 2>/dev/null

  echo "<br>"

  #echo "<span class='album'>${songpath}</span><br>"

  [[ "$action" = @(skipped|ignored) ]] && echo "</s></i>"
  echo
done < <( cat "${mpdlogfile[@]}" |
          tail -n "${tail1}" |
          grep player |
          tail -n "${tail2}" |
          tac )

navbuttons

echo "</body>"
echo "</html>"

exit

