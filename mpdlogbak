#!/bin/bash
# nb: the swp wfile that editscript relies on is provided by nano

MPDSOCK="/var/run/mpd/socket"

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" < /dev/tty; }

mpdc() {
    local command=$1
    echo -ne "$command\n" | socat - UNIX-CONNECT:"$MPDSOCK"
}

ampm() {
    local ts="$1"
#    date -d "$ts" "+%b %d %I:%M %P"      # Apr 20 04:20 pm
    date -d "$ts" "+%b %d %l:%M %P"       # Apr 20 4:20 pm
}

navbuttons() {
echo "<form method='get' action=''>"
echo "<button type='submit' name='action' value='toggle_playback' class='btn btn-primary'>Toggle Play/Pause</button>"
echo "<button type='submit' name='action' value='next_track' class='btn btn-secondary'>Next Track</button>"
echo "</form>"
}


metadata-json() {
    metadata=$(mpc current -f '{"name":"%name%","artist":"%artist%","album":"%album%","albumartist":"%albumartist%","comment":"%comment%","composer":"%composer%","date":"%date%","originaldate":"%originaldate%","disc":"%disc%","genre":"%genre%","performer":"%performer%","title":"%title%","track":"%track%","time":"%time%","file":"%file%"}')

#the -f does not belong on status but it seems to be preventing the buttons from working...
#but having it there breaks the photo

    status=$(mpc status '{"state":"%state%","volume":"%volume%","repeat":"%repeat%","random":"%random%","single":"%single%","consume":"%consume%"}')

    echo "{\"metadata\": $metadata, \"status\": $status}"
#    echo "{\"metadata\": $metadata}"

}

printmpcjson() {
echo -ne "${name:+Name: $name\n}"
echo -ne "${artist:+Artist: $artist\n}"
echo -ne "${album:+Album: $album\n}"
echo -ne "${albumartist:+Album Artist: $albumartist\n}"
echo -ne "${comment:+Comment: $comment\n}"
echo -ne "${composer:+Composer: $composer\n}"
echo -ne "${date:+Date: $date\n}"
echo -ne "${originaldate:+Original Date: $originaldate\n}"
echo -ne "${disc:+Disc: $disc\n}"
echo -ne "${genre:+Genre: $genre\n}"
echo -ne "${performer:+Performer: $performer\n}"
echo -ne "${title:+Title: $title\n}"
echo -ne "${track:+Track: $track\n}"
echo -ne "${time:+Time: $time\n}"
echo -ne "${file:+File: $file\n}"

echo -ne "${state:+State: $state\n}"
echo -ne "${volume:+Volume: $volume\n}"
echo -ne "${repeat:+Repeat: $repeat\n}"
echo -ne "${random:+Random: $random\n}"
echo -ne "${single:+Single: $single\n}"
echo -ne "${consume:+Consume: $consume\n}"

}

[[ "$1" == @(edit|e|-e) ]] && editscript
[[ "$1" == "--long" ]] && long=true

shopt -s extglob
songdir=\/library\/music\/$(dirname "$(\mpc current -f %file%)")
cover=( "${songdir}/"@(c|C)over.@(png|jpg|gif) )
shopt -u extglob

## Process the action from the form
#if [ "$REQUEST_METHOD" = "GET" ]; then
#  query=$(echo "$QUERY_STRING" | tr '&' '\n' | grep -E '^(action=)' | cut -d= -f2)
##  echo "$(date) - Processing query: $query" >> "$LOGFILE"
#  case "$query" in
#    toggle_playback)
##      echo "$(date) - Toggling playback" >> "$LOGFILE"
#      mpc toggle
#      ;;
#    next_track)
##      echo "$(date) - Moving to next track" >> "$LOGFILE"
#      mpc next
#     ;;
#    *)
##      echo "$(date) - Unknown action: $query" >> "$LOGFILE"
#      ;;
#  esac
#fi
#if [ "$REQUEST_METHOD" = "GET" ]; then
#  query=$(echo "$QUERY_STRING" | tr '&' '\n' | grep -E '^(action=)' | cut -d= -f2)
#  echo "$(date) - Processing query: $query" >> "$LOGFILE"
#  case "$query" in
#    toggle_playback)
#      echo "$(date) - Toggling playback" >> "$LOGFILE"
#      mpc toggle
#      echo "Content-type: text/html; charset=UTF-8"
#      echo ""
#      echo "<html><head><meta http-equiv='refresh' content='0'></head><body></body></html>"
#      exit
#      ;;
#    next_track)
#      echo "$(date) - Moving to next track" >> "$LOGFILE"
#      mpc next
#      echo "Content-type: text/html; charset=UTF-8"
#      echo ""
#      echo "<html><head><meta http-equiv='refresh' content='0'></head><body></body></html>"
#      exit
#      ;;
#    *)
#      echo "$(date) - Unknown action: $query" >> "$LOGFILE"
#      ;;
#  esac
#fi

process_form() {
if [ "$REQUEST_METHOD" = "GET" ]; then
  query=$(echo "$QUERY_STRING" | tr '&' '\n' | grep -E '^(action=)' | cut -d= -f2)
  case "$query" in
    toggle_playback)
      mpc toggle
      echo "Content-type: text/html; charset=UTF-8"
      echo ""
      exit
      ;;
    next_track)
      mpc next
      echo "Content-type: text/html; charset=UTF-8"
      echo ""
      exit
      ;;
  esac
fi
}

process_form

echo "Content-type: text/html; charset=UTF-8"
echo ""
echo "<html><head><title>mpd played</title>"

# Add the viewport meta tag for responsive design
echo "<meta name='viewport' content='width=device-width, initial-scale=1'>"

# Include Bootstrap CSS for responsive design
echo "<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css'>"

mpcjson="$(metadata-json)"

# this also works but is a security issue
#eval "$(jq -r '.metadata | to_entries[] | "\(.key)=\(.value | @sh)"' <<< "$mpcjson")"
#eval "$(jq -r '.status | to_entries[] | "\(.key)=\(.value | @sh)"' <<< "$mpcjson")"

while IFS= read -r line; do
    IFS='=' read -r key value <<< "$line"
    declare "$key=$value"
done < <(jq -r '.metadata | to_entries[] | "\(.key)=\(.value)"' <<< "$mpcjson")

while IFS= read -r line; do
    IFS='=' read -r key value <<< "$line"
    declare "$key=$value"
done < <(jq -r '.status | to_entries[] | "\(.key)=\(.value)"' <<< "$mpcjson")
    [[ "$repeat" = on ]] && repeat="<span class='song'>⟳$nbsp</span>" || repeat='⟳'
    [[ "$consume" = on ]] && consume="✅" || consume="❌"
    [[ "$random" = on ]] && random="✅" || random="❌"
    [[ "$single" = on ]] && single="✅" || unset single

if [[ "$state" = "playing" && "$long" != true ]]; then
  echo "<meta http-equiv='refresh' content='45'>"
fi
album_art_base64=$(mpc readpicture "$file" | base64)
album_art_stderr=$(mpc readpicture "$file" 2>&1 >/dev/null)

echo "<style>"
echo "body { font-family: Arial, sans-serif; background-color: #f4f4f4; color: #333; padding: 20px; }"
echo "h1 { color: #444; }"
echo "pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px; line-height: 1.5; }"
echo "h2, h3 { margin: 0; padding: 0; }"
echo ".timestamp { color: #007bff; }"
echo ".song { color: #28a745; }"
echo ".artist { color: #dc3545; }"
echo ".album { color: #6c757d; }"
#echo ".watermark { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url('$cover'); opacity: 0.1; pointer-events: none; }"
echo ".tab-stops { tab-size: 8; -moz-tab-size: 8; -o-tab-size: 8; }"
#echo ".watermark {"
#echo "    width: 100%;"
#echo "    height: 100%;"
#echo "    position: fixed;"
#echo "    top: 0;"
#echo "    left: 0;"
#echo "    background-size: cover;"
#echo "    background-image: url('data:image/jpeg;base64,$album_art_base64');"
#echo "    opacity: 0.5;"
#echo "    z-index: -1;"
#echo "}"
echo "</style>"
echo "</head><body>"

# Add watermark div
#echo "<div class='watermark'></div>"
#echo "<div class='watermark' style='background-image: url(\"$cover\");'></div>"

echo "<h1>mpd</h1><hr>"
#echo "<h3>currently playing:</h3>"
echo "<strong class='timestamp'>$(mpc status "\[%state%\] ##%songpos%#/%length%<br>elapsed %currenttime%/%totaltime% (%percenttime%)")</span><br>"

echo "<span class='song'><strong>$(mpc current -f "[%title%]|[%file%]")</strong></span><br>"
echo "<span class='artist'><strong>$(mpc current -f "%artist%")</span><br>"

year="${originaldate:-${date}}"; year="${year%%-*}" # this can be done in the echo below too

echo "<span class='album'><strong> ${album% (mp3)} ${year:+(${year})} </strong></span><br>" #${date:+($date)}

echo "<span class='album'>volume: $volume&nbsp ${repeat:+$repeat}$nbsp</span><span class='album'> ${single:+single: $single}<br>${random:+random: $random}&nbsp&nbsp${consume:+consume: $consume}<br>  </span><hr>"


if [[ -n "$album_art_base64" && "$album_art_stderr" != No\ data* ]]; then
#    echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' />"
echo "<img src='data:image/jpeg;base64,$album_art_base64' alt='Album Art' style='max-width: 30%; height: auto;' />"
else
    echo "<p>No album art available</p>"
fi

echo "<hr>"
#echo "<pre>"

tail1=500; tail2=12

if "${long}"; then tail1=10000 && tail2=250; fi 2>/dev/null

while read -r i; do
    unset artist action
    timestamp="${i%% : *}"; timestamp="$(ampm "$timestamp")"
    action="${i#*player: }"; action="${action%% *}"
    songpath="${i%\"*}"; qsongpath="\"$songpath"; songpath="${songpath#*\"}"
    song="$(basename "$songpath")"; song="${song%.*}"
    duration="$(mpc --format %time% search filename "$songpath")"

   #this does not work when songpath contains special characters, but it works otherwise:
   #duration=$(mpdc find\ \"\(File\ ==\ \\\""$songpath"\\\"\)\"|grep duration)

    if [[ "$song" =~ .+\ --\ (([[:digit:]]{1,3}(-)?)?[[:digit:]]{1,3})\ -\ .+ ]]; then
       artist="${song%% -- *}"
       song="${song#* - }"
    elif [[ "$song" =~ (([[:digit:]]{1,3}(-)?)?[[:digit:]]{1,3})\ -\ .+\ --\ .+ ]]; then
       artist="${song%% -- *}"; artist="${artist#* - }"
       song="${song#* -- }"
    fi

    songdir="$(dirname "$songpath")"
#    artist="${songdir%% -- *}"; artist="${artist##*\/}"
    album="${songdir#* -- }"; album="${album##*\/}"; album="${album% (mp3)}"
    [[ "$action" = @(skipped|ignored) ]] && echo "<s>"
    [[ "$action" = ignored ]] && echo "<i>"
    echo "<strong class='timestamp'>@ $timestamp, $action</span><br>"
    echo "<span class='song'>$song - $duration</span></strong><br>"
    echo "<span class='artist'>$artist</span><br>"
    echo "<span class='album'>$album</span><br>"
    if [[ "${long}" = true ]]; then echo "<span class='album'>${songpath}</span><br>"; fi 2>/dev/null
    echo "<br>"

    #echo "<span class='album'>${songpath}</span><br>"

    [[ "$action" = @(skipped|ignored) ]] && echo "</s></i>"
    echo
done < <(tail -n "${tail1}" /var/log/mpd/mpd.log | grep player | tail -n "${tail2}" | tac)


#navbuttons

echo "<pre>"
echo "<div class='button-container'>"
echo "<form method='get' action=''>"
echo "<button type='submit' name='action' value='toggle_playback' class='btn btn-primary'>Toggle Play/Pause</button>"
echo "<button type='submit' name='action' value='next_track' class='btn btn-secondary'>Next Track</button>"
echo "</form>"


#<form id='controlForm'>
#  <button type='button' onclick='sendAction("toggle_playback")' class='btn btn-primary'>Toggle Play/Pause</button>
#  <button type='button' onclick='sendAction("next_track")' class='btn btn-secondary'>Next Track</button>
#</form>
#<script>
#  function sendAction(action) {
#    var xhr = new XMLHttpRequest();
#    xhr.open('GET', '?action=' + action, true);
#    xhr.onreadystatechange = function () {
#      if (xhr.readyState == 4 && xhr.status == 200) {
#        location.reload();
#      }
#    };
#    xhr.send();
#  }
#</script>


echo "</div>"

echo "</pre>"
echo "</body></html>"
exit





